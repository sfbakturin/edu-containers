name: Build and test Docker images

on: push

env:
  RUN_TESTS:
    true

jobs:
  ubuntu:
    name: "Building and testing image (Ubuntu: ${{matrix.compiler.name}})"

    strategy:
      fail-fast: true
      matrix:
        compiler:
          - {name: Clang 18, cc: clang, cxx: clang++, version: 18}
          - {name: Clang 17, cc: clang, cxx: clang++, version: 17}
          - {name: Clang 16, cc: clang, cxx: clang++, version: 16}
          - {name: Clang 15, cc: clang, cxx: clang++, version: 15}
          - {name: GCC 13, cc: gcc, cxx: g++, version: 13}
          - {name: GCC 12, cc: gcc, cxx: g++, version: 12}
          - {name: GCC 11, cc: gcc, cxx: g++, version: 11}
          - {name: GCC 10, cc: gcc, cxx: g++, version: 10}
          - {name: GCC 9, cc: gcc, cxx: g++, version: 9}

    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: "${{vars.HUB_USERNAME}}/educontainer"
      IMAGE_TAG: "${{matrix.compiler.cc}}${{matrix.compiler.version}}"

    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build --tag "${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}" --build-arg COMPILER_NAME=${{matrix.compiler.cc}} --build-arg COMPILER_NAMEXX=${{matrix.compiler.cxx}} --build-arg COMPILER_VERSION=${{matrix.compiler.version}} --build-arg RUN_TESTS=${{env.RUN_TESTS}} -f ubuntu/Dockerfile .
      - name: Test Docker image
        run: |
          docker run -t -d --name testing "${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}"
          docker cp testing/. testing:/student
          docker exec testing bash test.sh

  windows:
    name: "Building and testing image (Windows: ${{matrix.os.name}}, ${{matrix.compiler.name}})"

    strategy:
      fail-fast: true
      matrix:
        compiler:
          - {name: MSVC, cc: cl}

        os:
          - {name: LTSC 2022, sys: ltsc2022}

    runs-on: windows-2022

    env:
      IMAGE_NAME: "${{vars.HUB_USERNAME}}/educontainer"
      IMAGE_TAG: "${{matrix.os.sys}}-${{matrix.compiler.cc}}"

    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build --tag "${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}" --build-arg RUN_TESTS=${{env.RUN_TESTS}} -f windows/Dockerfile .
